// Variables
:root {
    --focus: OliveDrab;
    --required: '*';
    --trans: .2s;
    --chat-receive: #90CAF9;
    --chat-send: #81C784;
}

// Main stuffs
body {
    font-family: Ubuntu, Calibri, Arial, Helvetica, sans-serif;
    margin: 0;
    // display: grid;
    // grid-template-columns: 50% 50%;
    // h1:first-child {
    //     grid-column-start: 1;
    //     grid-column-end: 3;
    // }
}

img {
    min-width: 100%;
    max-width: 100%;
}

// Focus stuffs
*:focus {
    // border-style: solid;
    border-color: var(--focus, red);
    outline-color: var(--focus, red);
}

// Navigations
nav {
    ul, ol {
        list-style: none;
        padding: 0;
        display: flex;
        justify-content: space-around;
        ul {
            display: none;
        }
        li:hover, li:focus-within {
            position: relative;
            ul {
                position: absolute;
                display: block;
            }
        }
    }
    ol {
        display: grid;
        grid-template-columns: 25% 25% 25% 25%;
        text-align: center;
    }
    progress {
        + ol {
            color: green;
        }
    }
}

// Progress bar
progress {
    // TODO: Anim
    width: 100%;
}

// Form related stuff
form {
    [autofocus] {
        display: none; // TODO: Temp disable to kill autofocus
    }
    label {
        flex-direction: row;
        justify-content: flex-start;
    }
}

label {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    font-size: 1.2em;
    svg {
        order: -1;
        width: 2em;
        height: 2em;
        transition: calc(var(--trans) * 2);
        filter: grayscale(100%);
        cursor: pointer;
    }
}

input, button {
    display: block;
    font-size: 1.4em;
    padding: .5em;
    margin-bottom: 1em;
    margin-top: .5em;
    &:required {
        color: blue;
        // We cannot use after's on inputs
    }
}

input[type=radio] {
    // Display none cancels the focus interactions
    // The opacity hides it, in the CSS grid these fields are specified as having no size
    opacity: 0;
    &:checked + label {
        svg {
            filter: grayscale(0);
        }
    }
}

fieldset {
    > div {
        display: grid;
        grid-template-columns: 0 25% 0 25% 0 25% 0 25%;
    }
    &:focus-within {
        border-color: var(--focus);
    }
}

// Article-like
article, #chat {
    padding: 1em 2em;
}

p {
    max-width: 40em;
    font-size: 1.4em;
    line-height: 1.4em;
}

// Figure display
figure {
    // TODO: What if we only have one image?
    // Or a video?
    // TODO: Do we wanna overlay the title/text (on hover/focus)
    margin: 0; // Let the figure take up all the space
    @media screen and (orientation: landscape){
        img:first-of-type {
            display: none;
        }
    }
    @media screen and (orientation: portrait){
        // img:last-of-type {
        img:nth-of-type(2) {
            display: none;
        }
    }
    figcaption {
        footer {
            font-style: italic;
            text-align: right;
        }
    }
}

// Chat
#chat {
    background-color: rgb(240,240,240);
    ol {
        padding: 0;
        list-style: none;
        li {
            background-color: var(--chat-receive);
            border-radius: 1em;
            padding: .5em 1em;
            margin-bottom: .8em;
            position: relative; // For the footer::after
            p {
                margin: 0;
            }
            &.send { // Use this only for the block level, not the chat-footer
                background-color: var(--chat-send);
            }
        }
        footer {
            display: flex;
            justify-content: space-between;
            p {
                z-index: 2;
                font-size: 1em;
                + p {
                    overflow: hidden;
                    text-indent: -999em;
                }
                &::before {
                    text-indent: 0;
                    float: right;
                }
                &[data-status=DELIVERED] {
                    &::before {
                        content: 'ðŸ“¬';
                    }
                }
                &[data-status=READ] {
                    &::before {
                        content: 'ðŸ“­';
                    }
                }
                &:first-of-type { // Always the 'Posted On' text
                    &::after {
                        content: ' ';
                        white-space: pre;
                        width: 1em;
                        position: absolute;
                        bottom: 0;
                        z-index: -1;
                        right: 0;
                        background-color: var(--chat-send);
                    }
                }
                &:nth-last-child(n+2)::after, &:nth-last-child(n+2) ~ p::after { // Both P's IF there is at least 2
                    left: 0;
                    background-color: var(--chat-receive);
                }
            }
            
            // p:nth-last-child(n+2), p:nth-last-child(n+2) ~ p { // Both P's IF there is at least 2
            //     &::after {
            //         left: 0;
            //         background-color: var(--chat-receive);
            //     }
            // }
        }
    }
}