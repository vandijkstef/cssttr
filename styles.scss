// Variables
:root {
    --focus: OliveDrab;
    --required: '*';
    --trans: .2s;
    --chat-receive: #90CAF9;
	--chat-send: #81C784;
	--chat-bg: rgb(220,220,220);
	--bg: rgb(10, 22, 18);
	--bg-fade: rgba(10, 22, 18, .7);
	--accent: rgb(80, 17, 29);
	--text: rgb(238, 238, 238);
	--text-inactive: rgb(137, 137, 141);
	--hide: rgba(0,0,0,0);
	--show: rgba(0,0,0,1);
}

@font-face {
    font-family: Ampersand; 
    src: local('Baskerville'), local('Goudy Old Style'), local('Palatino'), local('Book Antiqua');
    unicode-range: U+26;
}

// Main stuffs
body {
    font-family: Ampersand, Ubuntu, Calibri, Arial, Helvetica, sans-serif;
	margin: 0;
	font-size: 1.4em;
	line-height: 1.4em;
	color: var(--text);
    background-color: var(--bg);
    transition: filter calc(var(--trans)*3) calc(var(--trans));
	> h1 {
        margin: 1em 0;
		padding: 0 1em;
    }
    &.blurred {
        > * {
            filter: blur(10px);
        }
    }
}

img {
    min-width: 100%;
    max-width: 100%;
}

a {
	color: var(--text);
}

*:focus {
    border-color: var(--focus);
	outline-color: var(--focus);
}

// Navigations
nav {
    ul, ol {
        list-style: none;
        padding: 0;
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(10em, 2fr));
		grid-gap: .2em;
		text-align: center;
		margin: 0;
		// Dropdown
        ul {
			display: none;
			width: 100%;
			position: absolute;
        }
        li:hover, li:focus-within {
            position: relative;
            ul {
				display: block;
            }
        }
    }
    ol {
		grid-template-columns: 25% 25% 25% 25%;
		padding: 0 0 .5em;
    }
    progress {
        + ol {
			color: var(--text-inactive);
        }
	}
	a {
		text-decoration: none;
		display: block;
		width: 100%;
		transition: var(--trans);
		&:hover, &:focus {
			background-color: rgba(255, 255, 255, .1);
			outline: 0;
		}
	}
	&:first-of-type {
		background-color: var(--accent);
		h1 {
			display: none;
		}
		li ul {
			background-color: var(--accent);
		}
		a {
			padding: .5em 0;
		}
	}
}


// Progress bar
progress {
    // TODO: Anim
    width: 100%;
}

// Form related stuff
form {
    // [autofocus] {
    	// display: none; // TODO: Temp disable to kill autofocus
    // }
    label {
        flex-direction: row;
        justify-content: flex-start;
    }
}

fieldset label {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: flex-end;
	position: relative;
	color: var(--hide);
    svg {
        order: -1;
        width: 2em;
        height: 2em;
        transition: calc(var(--trans) * 2);
        filter: grayscale(100%);
		cursor: pointer;
		position: absolute;
		bottom: 0;
    }
}

input, button {
    display: block;
    font-size: 1.1em;
    margin-bottom: 1em;
	margin-top: .5em;
	padding: .2em;
    &:required {
		color: blue;
        // We cannot use after's on inputs apparently
    }
}

input {
	padding: .5em;
}

input[type=radio] {
    // Display none cancels the focus interactions
	// The opacity hides it, in the CSS grid these fields are specified as having no size
	// This css should be more specific since we are hiding the radio fields
    opacity: 0;
    &:checked + label {
        svg {
			filter: grayscale(0);
			transform: scale(1.5);
        }
    }
}

input[type=checkbox] {
	display: inline;
}

fieldset {
    border: none;
    filter: blur(0);
    > div { // Added to support flex/grid view in a fieldset
		padding: 1em 0;
        display: grid;
        grid-template-columns: 0 25% 0 25% 0 25% 0 25%;
    }
    legend {
        position: relative;
    }
    &:focus-within {
        position: relative;
        z-index: 1;
        filter: blur(0);
		svg {
			filter: grayscale(50%);
        }
        // De-emphasize by dimming
        &::before {
            background-color: rgba(0,0,0,.8);
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
        }
    }
    &::before {
        position: fixed;
        content: ' ';
        z-index: -1; // Without this line, the site isn't usable anymo'
        transition: background-color var(--trans);
    }
}

legend {
	font-size: 1.4em;
}

// Article-like
article, #chat, body > form {
	padding: 1em 2em;
}

article, #chat > *, form, fieldset, nav:nth-of-type(2) {
	max-width: 40em;
	margin: 0 auto;
	display: block;
}

// Figure display
figure {
    // TODO: What if we only have one image?
    // Or a video?
    // TODO: Do we wanna overlay the title/text (on hover/focus)
	margin: 0; // Let the figure take up all the space
	position: relative;
    @media screen and (orientation: landscape){
        img:first-of-type {
            display: none;
        }
    }
    @media screen and (orientation: portrait){
        // img:last-of-type {
        img:nth-of-type(2) {
            display: none;
        }
    }
    figcaption {
		position: absolute;
		bottom: 0;
		padding: 1em;
		background-color: var(--bg-fade);
        footer {
            font-style: italic;
            text-align: right;
        }
    }
}

// Chat
#chat {
	background-color: var(--chat-bg);
    color: var(--bg);
    position: relative;
    z-index: 0;
    ol {
        padding: 0;
        list-style: none;
        li {
            padding: .5em 1em;
            margin-bottom: .8em;
            position: relative; // For the footer::after
            // z-index: 1;
            p {
                margin: 0;
            }
        }
        footer {
            display: flex;
            justify-content: space-between;
            p {
                // z-index: 2;
                font-size: .8em;
                + p {
					// Hide the text while still be able to show the icon
					color: var(--hide);
                }
                &::before {
					float: right;
					color: var(--show);
                }
                &:first-of-type { // Always the 'Posted On' text
                    &::before, &::after {
                        content: ' ';
                        position: absolute;
                        bottom: 0;
                        right: 0;
                        z-index: -1;
                        background-color: var(--chat-receive);
                    }
                    &::before {
                        top: 0;
                        left: 0;
                        border-radius: 1em;
                    }
                    &::after { // Block corner fill
                        width: 1em;
                    }
                }
                &:nth-last-child(n+2), &:nth-last-child(n+2) ~ p { // Both P's IF there is at least 2
                    // Block corner fill
                    &::before, &::after {
                        background-color: var(--chat-send);
                    }
                    &::after {
                        left: 0;
                    }
                }
            }
        }
    }
}

// Define icons
[data-status=DELIVERED] {
	&::before {
		content: 'ðŸ“¬';
	}
}
[data-status=READ] {
	&::before {
		content: 'ðŸ“­';
	}
}